### This file was generated by Nexus Schema
### Do not make changes to this file directly

type ActivityLog {
  action: String!
  actorId: String
  createdAt: Date
  errorCode: String
  errorMessage: String
  id: String!
  inputModel: String!
  inputModelId: String!
  message: String
  outputModel: String
  outputModelId: String
}

type Budget {
  amount: Float!
  balance: Float!
  category: Category!
  createdAt: DateTime
  endDate: DateTime!
  id: String!
  name: String!
  transactions: [Transaction]
  updatedAt: DateTime
  user: User!
}

enum Category {
  CLOTHING
  DEBT_PAYMENTS
  EDUCATION
  ENTERTAINMENT
  FOOD_AND_GROCERIES
  GIFTS_AND_DONATIONS
  HEALTHCARE
  HOUSING_AND_RENT
  INSURANCE
  MISCELLANEOUS
  PERSONAL_CARE
  RESTAURANTS_AND_DINING
  SAVINGS_AND_INVESTMENTS
  TAXES
  TRANSPORTATION
  TRAVEL
  UTILITIES
}

enum Currency {
  EUR
  USD
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Debt {
  createdAt: DateTime
  id: String!
  interestRate: Float!
  interestType: InterestType!
  name: String!
  paymentYears: Int!
  startDate: DateTime!
  totalAmount: Float!
  transactions: [Transaction]
  updatedAt: DateTime
  user: User!
}

enum Gender {
  FEMALE
  MALE
  NO_BINARY
}

enum IncomeType {
  BUSINESS
  FREELANCE
  GIFTS
  GOVERNMENT_BENEFITS
  INVESTMENT
  OTHER
  PENSION
  RENTAL
  SALARY
}

enum InterestType {
  TAE
  TIN
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type LoginResponse {
  token: String
  user: User
}

type Mutation {
  _registerActivityLog(
    action: String!
    errorCode: String
    errorMessage: String
    inputModel: String!
    inputModelId: String!
    message: String
    outputModel: String
    outputModelId: String
  ): ActivityLog
  changeUserPassword(newPassword: String!, userId: String!): Boolean
  createBudget(
    amount: Float!
    category: Category!
    endDate: DateTime!
    name: String!
  ): Budget
  createDebt(
    interestRate: Float!
    interestType: InterestType!
    name: String!
    paymentYears: Int!
    startDate: DateTime!
    totalAmount: Float!
  ): Debt
  createTransaction(
    amount: Float!
    budgetId: String
    category: Category!
    date: DateTime!
    debtId: String
    description: String
    incomeType: IncomeType
    name: String!
    type: TransactionType!
  ): Transaction
  deleteBudget(budgetId: String!): Boolean
  deleteDebt(debtId: String!): Boolean
  deleteTransaction(transactionId: String!): Boolean
  login(email: String!, password: String!): LoginResponse
  registerUser(
    email: String!
    newsletter: Boolean
    password: String!
  ): RegisterResponse
  renewToken: String
  requestResetPassword(email: String!): Boolean
  requestUserDelete(password: String!): Boolean
  resetPasswordWithToken(newPassword: String!, token: String!): Boolean
  updateBudget(
    amount: Float
    budgetId: String!
    category: Category
    endDate: DateTime
    name: String
  ): Budget
  updateDebt(
    debtId: String!
    interestRate: Float
    interestType: InterestType
    name: String
    paymentYears: Int
    startDate: DateTime
    totalAmount: Float
  ): Debt
  updateTransaction(
    amount: Float
    budgetId: String
    category: Category
    date: DateTime
    debtId: String
    description: String
    incomeType: IncomeType
    name: String
    transactionId: String!
    type: TransactionType
  ): Transaction
  updateUser(
    birthday: Date
    currency: Currency
    gender: Gender
    lastname: String
    name: String
    newsletterOptIn: Boolean
  ): User
}

type Query {
  _canDoAction(requiredPermissions: [String]!, userId: String!): Boolean
  getBudget(budgetId: String!): Budget
  getBudgets(userId: String!): [Budget]
  getDebt(debtId: String!): Debt
  getDebts(userId: String!): [Debt]
  getTransaction(transactionId: String!): Transaction
  getTransactions(userId: String!): [Transaction]
  me(appId: String): User
}

type RegisterResponse {
  token: String
  user: User
}

type Transaction {
  amount: Float!
  budget: Budget
  category: Category
  createdAt: DateTime
  date: DateTime!
  debt: Debt
  description: String
  id: String!
  incomeType: IncomeType
  name: String!
  type: TransactionType!
  updatedAt: DateTime
  user: User!
}

enum TransactionType {
  DEBT
  EXPENSE
  INCOME
}

type User {
  aclRole: UserRole
  birthday: Date
  createdAt: DateTime
  currency: Currency
  deletedAt: DateTime
  email: String
  gender: Gender
  id: String!
  lastname: String
  name: String
  newsletterOptIn: Boolean
  status: UserStatus
  updatedAt: DateTime
}

input UserCreateInput {
  aclRole: UserRole
  birthday: Date
  email: String!
  gender: Gender
  lastname: String
  name: String
  newsletterOptIn: Boolean
  status: UserStatus
}

enum UserRole {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  BANNED
  DELETED_BY_ADMIN
  DELETED_BY_USER
  INACTIVE
}
