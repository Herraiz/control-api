//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// root.prisma
//

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

//
// activitylog.prisma
//

model ActivityLog {
  id            String  @id @default(uuid())
  source        String  @default("Control-Core")
  inputModel    String
  inputModelId  String
  action        String
  outputModel   String?
  outputModelId String?
  errorCode     String?
  errorMessage  String?

  message String?

  // Relations
  actor   User   @relation(fields: [actorId], references: [id])
  actorId String

  // Generic fields
  createdAt DateTime @default(now())
}

//
// user.prisma
//

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  password String
  aclRole  UserRole @default(USER)

  // Personal data
  name     String?
  lastname String?
  birthday DateTime?
  gender   Gender?

  // Privacy options
  newsletterOptIn Boolean @default(false)

  // Deleted fields
  deletedAt DateTime?

  // Relations
  loginLog LoginLog[]

  // Generic fields
  status      Status        @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  ActivityLog ActivityLog[]
}

model UserTimestampAction {
  userId     String
  actionType UserTimestampActionType
  sendAt     DateTime                @default(now()) @updatedAt

  @@unique([userId, actionType])
}

model LoginLog {
  id   String       @id @default(uuid())
  ip   String?
  type LoginLogType

  // Relations
  actor  User   @relation(fields: [userId], references: [id])
  userId String

  // Generic fields
  createdAt DateTime @default(now())
}

// #region Enums
enum UserRole {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  NO_BINARY
}

enum Status {
  ACTIVE
  INACTIVE
  BANNED
  DELETED_BY_USER
  DELETED_BY_ADMIN
}

enum UserTimestampActionType {
  ACTIVATION_SEND
  RESET_PASSWORD
}

enum LoginLogType {
  NEW_TOKEN
  RENEW_TOKEN
}
